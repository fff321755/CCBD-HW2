{"ast":null,"code":"/*\n * Copyright 2010-2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed\n * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\nimport './lib/axios/dist/axios.standalone.js';\nimport './lib/CryptoJS/rollups/hmac-sha256.js';\nimport './lib/CryptoJS/rollups/sha256.js';\nimport './lib/CryptoJS/components/hmac.js';\nimport './lib/CryptoJS/components/enc-base64.js';\nimport './lib/url-template/url-template.js';\nimport './lib/apiGatewayCore/sigV4Client.js';\nimport './lib/apiGatewayCore/apiGatewayClient.js';\nimport './lib/apiGatewayCore/simpleHttpClient.js';\nimport './lib/apiGatewayCore/utils.js';\nvar apigClientFactory = {};\n\napigClientFactory.newClient = function (config) {\n  var apigClient = {};\n\n  if (config === undefined) {\n    config = {\n      accessKey: '',\n      secretKey: '',\n      sessionToken: '',\n      region: '',\n      apiKey: undefined,\n      defaultContentType: 'application/json',\n      defaultAcceptType: 'application/json'\n    };\n  }\n\n  if (config.accessKey === undefined) {\n    config.accessKey = '';\n  }\n\n  if (config.secretKey === undefined) {\n    config.secretKey = '';\n  }\n\n  if (config.apiKey === undefined) {\n    config.apiKey = '';\n  }\n\n  if (config.sessionToken === undefined) {\n    config.sessionToken = '';\n  }\n\n  if (config.region === undefined) {\n    config.region = 'us-east-1';\n  } //If defaultContentType is not defined then default to application/json\n\n\n  if (config.defaultContentType === undefined) {\n    config.defaultContentType = 'application/json';\n  } //If defaultAcceptType is not defined then default to application/json\n\n\n  if (config.defaultAcceptType === undefined) {\n    config.defaultAcceptType = 'application/json';\n  } // extract endpoint and path from url\n\n\n  var invokeUrl = 'https://ri9wp1d2z2.execute-api.us-east-1.amazonaws.com/a2';\n  var endpoint = /(^https?:\\/\\/[^\\/]+)/g.exec(invokeUrl)[1];\n  var pathComponent = invokeUrl.substring(endpoint.length);\n  var sigV4ClientConfig = {\n    accessKey: config.accessKey,\n    secretKey: config.secretKey,\n    sessionToken: config.sessionToken,\n    serviceName: 'execute-api',\n    region: config.region,\n    endpoint: endpoint,\n    defaultContentType: config.defaultContentType,\n    defaultAcceptType: config.defaultAcceptType\n  };\n  var authType = 'NONE';\n\n  if (sigV4ClientConfig.accessKey !== undefined && sigV4ClientConfig.accessKey !== '' && sigV4ClientConfig.secretKey !== undefined && sigV4ClientConfig.secretKey !== '') {\n    authType = 'AWS_IAM';\n  }\n\n  var simpleHttpClientConfig = {\n    endpoint: endpoint,\n    defaultContentType: config.defaultContentType,\n    defaultAcceptType: config.defaultAcceptType\n  };\n  var apiGatewayClient = apiGateway.core.apiGatewayClientFactory.newClient(simpleHttpClientConfig, sigV4ClientConfig);\n\n  apigClient.searchGet = function (params, body, additionalParams) {\n    if (additionalParams === undefined) {\n      additionalParams = {};\n    }\n\n    apiGateway.core.utils.assertParametersDefined(params, ['q'], ['body']);\n    var searchGetRequest = {\n      verb: 'get'.toUpperCase(),\n      path: pathComponent + uritemplate('/search').expand(apiGateway.core.utils.parseParametersToObject(params, [])),\n      headers: apiGateway.core.utils.parseParametersToObject(params, []),\n      queryParams: apiGateway.core.utils.parseParametersToObject(params, ['q']),\n      body: body\n    };\n    return apiGatewayClient.makeRequest(searchGetRequest, authType, additionalParams, config.apiKey);\n  };\n\n  apigClient.searchOptions = function (params, body, additionalParams) {\n    if (additionalParams === undefined) {\n      additionalParams = {};\n    }\n\n    apiGateway.core.utils.assertParametersDefined(params, [], ['body']);\n    var searchOptionsRequest = {\n      verb: 'options'.toUpperCase(),\n      path: pathComponent + uritemplate('/search').expand(apiGateway.core.utils.parseParametersToObject(params, [])),\n      headers: apiGateway.core.utils.parseParametersToObject(params, []),\n      queryParams: apiGateway.core.utils.parseParametersToObject(params, []),\n      body: body\n    };\n    return apiGatewayClient.makeRequest(searchOptionsRequest, authType, additionalParams, config.apiKey);\n  };\n\n  apigClient.bucketFilenamePut = function (params, body, additionalParams) {\n    if (additionalParams === undefined) {\n      additionalParams = {};\n    }\n\n    apiGateway.core.utils.assertParametersDefined(params, ['filename', 'bucket', 'x-amz-meta-customLabels'], ['body']);\n    var bucketFilenamePutRequest = {\n      verb: 'put'.toUpperCase(),\n      path: pathComponent + uritemplate('/{bucket}/{filename}').expand(apiGateway.core.utils.parseParametersToObject(params, ['filename', 'bucket'])),\n      headers: apiGateway.core.utils.parseParametersToObject(params, ['x-amz-meta-customLabels']),\n      queryParams: apiGateway.core.utils.parseParametersToObject(params, []),\n      body: body\n    };\n    return apiGatewayClient.makeRequest(bucketFilenamePutRequest, authType, additionalParams, config.apiKey);\n  };\n\n  return apigClient;\n};","map":{"version":3,"sources":["/Users/fkhw/CourseWorks/Cloud Computing & Big Data/homework2/front/photo-search/src/apigClient.js"],"names":["apigClientFactory","newClient","config","apigClient","undefined","accessKey","secretKey","sessionToken","region","apiKey","defaultContentType","defaultAcceptType","invokeUrl","endpoint","exec","pathComponent","substring","length","sigV4ClientConfig","serviceName","authType","simpleHttpClientConfig","apiGatewayClient","apiGateway","core","apiGatewayClientFactory","searchGet","params","body","additionalParams","utils","assertParametersDefined","searchGetRequest","verb","toUpperCase","path","uritemplate","expand","parseParametersToObject","headers","queryParams","makeRequest","searchOptions","searchOptionsRequest","bucketFilenamePut","bucketFilenamePutRequest"],"mappings":"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","sourcesContent":["/*\n * Copyright 2010-2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed\n * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\n\nimport './lib/axios/dist/axios.standalone.js'\nimport './lib/CryptoJS/rollups/hmac-sha256.js'\nimport './lib/CryptoJS/rollups/sha256.js'\nimport './lib/CryptoJS/components/hmac.js'\nimport './lib/CryptoJS/components/enc-base64.js'\nimport './lib/url-template/url-template.js'\nimport './lib/apiGatewayCore/sigV4Client.js'\nimport './lib/apiGatewayCore/apiGatewayClient.js'\nimport './lib/apiGatewayCore/simpleHttpClient.js'\nimport './lib/apiGatewayCore/utils.js'\n\nvar apigClientFactory = {};\napigClientFactory.newClient = function (config) {\n    var apigClient = { };\n    if(config === undefined) {\n        config = {\n            accessKey: '',\n            secretKey: '',\n            sessionToken: '',\n            region: '',\n            apiKey: undefined,\n            defaultContentType: 'application/json',\n            defaultAcceptType: 'application/json'\n        };\n    }\n    if(config.accessKey === undefined) {\n        config.accessKey = '';\n    }\n    if(config.secretKey === undefined) {\n        config.secretKey = '';\n    }\n    if(config.apiKey === undefined) {\n        config.apiKey = '';\n    }\n    if(config.sessionToken === undefined) {\n        config.sessionToken = '';\n    }\n    if(config.region === undefined) {\n        config.region = 'us-east-1';\n    }\n    //If defaultContentType is not defined then default to application/json\n    if(config.defaultContentType === undefined) {\n        config.defaultContentType = 'application/json';\n    }\n    //If defaultAcceptType is not defined then default to application/json\n    if(config.defaultAcceptType === undefined) {\n        config.defaultAcceptType = 'application/json';\n    }\n\n    \n    // extract endpoint and path from url\n    var invokeUrl = 'https://ri9wp1d2z2.execute-api.us-east-1.amazonaws.com/a2';\n    var endpoint = /(^https?:\\/\\/[^\\/]+)/g.exec(invokeUrl)[1];\n    var pathComponent = invokeUrl.substring(endpoint.length);\n\n    var sigV4ClientConfig = {\n        accessKey: config.accessKey,\n        secretKey: config.secretKey,\n        sessionToken: config.sessionToken,\n        serviceName: 'execute-api',\n        region: config.region,\n        endpoint: endpoint,\n        defaultContentType: config.defaultContentType,\n        defaultAcceptType: config.defaultAcceptType\n    };\n\n    var authType = 'NONE';\n    if (sigV4ClientConfig.accessKey !== undefined && sigV4ClientConfig.accessKey !== '' && sigV4ClientConfig.secretKey !== undefined && sigV4ClientConfig.secretKey !== '') {\n        authType = 'AWS_IAM';\n    }\n\n    var simpleHttpClientConfig = {\n        endpoint: endpoint,\n        defaultContentType: config.defaultContentType,\n        defaultAcceptType: config.defaultAcceptType\n    };\n\n    var apiGatewayClient = apiGateway.core.apiGatewayClientFactory.newClient(simpleHttpClientConfig, sigV4ClientConfig);\n    \n    \n    \n    apigClient.searchGet = function (params, body, additionalParams) {\n        if(additionalParams === undefined) { additionalParams = {}; }\n        \n        apiGateway.core.utils.assertParametersDefined(params, ['q'], ['body']);\n        \n        var searchGetRequest = {\n            verb: 'get'.toUpperCase(),\n            path: pathComponent + uritemplate('/search').expand(apiGateway.core.utils.parseParametersToObject(params, [])),\n            headers: apiGateway.core.utils.parseParametersToObject(params, []),\n            queryParams: apiGateway.core.utils.parseParametersToObject(params, ['q']),\n            body: body\n        };\n        \n        \n        return apiGatewayClient.makeRequest(searchGetRequest, authType, additionalParams, config.apiKey);\n    };\n    \n    \n    apigClient.searchOptions = function (params, body, additionalParams) {\n        if(additionalParams === undefined) { additionalParams = {}; }\n        \n        apiGateway.core.utils.assertParametersDefined(params, [], ['body']);\n        \n        var searchOptionsRequest = {\n            verb: 'options'.toUpperCase(),\n            path: pathComponent + uritemplate('/search').expand(apiGateway.core.utils.parseParametersToObject(params, [])),\n            headers: apiGateway.core.utils.parseParametersToObject(params, []),\n            queryParams: apiGateway.core.utils.parseParametersToObject(params, []),\n            body: body\n        };\n        \n        \n        return apiGatewayClient.makeRequest(searchOptionsRequest, authType, additionalParams, config.apiKey);\n    };\n    \n    \n    apigClient.bucketFilenamePut = function (params, body, additionalParams) {\n        if(additionalParams === undefined) { additionalParams = {}; }\n        \n        apiGateway.core.utils.assertParametersDefined(params, ['filename', 'bucket', 'x-amz-meta-customLabels'], ['body']);\n        \n        var bucketFilenamePutRequest = {\n            verb: 'put'.toUpperCase(),\n            path: pathComponent + uritemplate('/{bucket}/{filename}').expand(apiGateway.core.utils.parseParametersToObject(params, ['filename', 'bucket', ])),\n            headers: apiGateway.core.utils.parseParametersToObject(params, ['x-amz-meta-customLabels']),\n            queryParams: apiGateway.core.utils.parseParametersToObject(params, []),\n            body: body\n        };\n        \n        \n        return apiGatewayClient.makeRequest(bucketFilenamePutRequest, authType, additionalParams, config.apiKey);\n    };\n    \n\n    return apigClient;\n};\n"]},"metadata":{},"sourceType":"module"}