{"ast":null,"code":"/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n(function () {\n  // Shortcuts\n  var C = CryptoJS;\n  var C_lib = C.lib;\n  var WordArray = C_lib.WordArray;\n  var C_enc = C.enc;\n  /**\n   * Base64 encoding strategy.\n   */\n\n  var Base64 = C_enc.Base64 = {\n    /**\n     * Converts a word array to a Base64 string.\n     *\n     * @param {WordArray} wordArray The word array.\n     *\n     * @return {string} The Base64 string.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);\n     */\n    stringify: function (wordArray) {\n      // Shortcuts\n      var words = wordArray.words;\n      var sigBytes = wordArray.sigBytes;\n      var map = this._map; // Clamp excess bits\n\n      wordArray.clamp(); // Convert\n\n      var base64Chars = [];\n\n      for (var i = 0; i < sigBytes; i += 3) {\n        var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n        var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 0xff;\n        var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 0xff;\n        var triplet = byte1 << 16 | byte2 << 8 | byte3;\n\n        for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++) {\n          base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 0x3f));\n        }\n      } // Add padding\n\n\n      var paddingChar = map.charAt(64);\n\n      if (paddingChar) {\n        while (base64Chars.length % 4) {\n          base64Chars.push(paddingChar);\n        }\n      }\n\n      return base64Chars.join('');\n    },\n\n    /**\n     * Converts a Base64 string to a word array.\n     *\n     * @param {string} base64Str The Base64 string.\n     *\n     * @return {WordArray} The word array.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var wordArray = CryptoJS.enc.Base64.parse(base64String);\n     */\n    parse: function (base64Str) {\n      // Shortcuts\n      var base64StrLength = base64Str.length;\n      var map = this._map; // Ignore padding\n\n      var paddingChar = map.charAt(64);\n\n      if (paddingChar) {\n        var paddingIndex = base64Str.indexOf(paddingChar);\n\n        if (paddingIndex != -1) {\n          base64StrLength = paddingIndex;\n        }\n      } // Convert\n\n\n      var words = [];\n      var nBytes = 0;\n\n      for (var i = 0; i < base64StrLength; i++) {\n        if (i % 4) {\n          var bits1 = map.indexOf(base64Str.charAt(i - 1)) << i % 4 * 2;\n          var bits2 = map.indexOf(base64Str.charAt(i)) >>> 6 - i % 4 * 2;\n          words[nBytes >>> 2] |= (bits1 | bits2) << 24 - nBytes % 4 * 8;\n          nBytes++;\n        }\n      }\n\n      return WordArray.create(words, nBytes);\n    },\n    _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='\n  };\n})();","map":{"version":3,"sources":["/Users/fkhw/CourseWorks/Cloud Computing & Big Data/homework2/front/photo-search/src/sdk/lib/CryptoJS/components/enc-base64.js"],"names":["C","CryptoJS","C_lib","lib","WordArray","C_enc","enc","Base64","stringify","wordArray","words","sigBytes","map","_map","clamp","base64Chars","i","byte1","byte2","byte3","triplet","j","push","charAt","paddingChar","length","join","parse","base64Str","base64StrLength","paddingIndex","indexOf","nBytes","bits1","bits2","create"],"mappings":"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","sourcesContent":["/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n(function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var C_enc = C.enc;\n\n    /**\n     * Base64 encoding strategy.\n     */\n    var Base64 = C_enc.Base64 = {\n        /**\n         * Converts a word array to a Base64 string.\n         *\n         * @param {WordArray} wordArray The word array.\n         *\n         * @return {string} The Base64 string.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);\n         */\n        stringify: function (wordArray) {\n            // Shortcuts\n            var words = wordArray.words;\n            var sigBytes = wordArray.sigBytes;\n            var map = this._map;\n\n            // Clamp excess bits\n            wordArray.clamp();\n\n            // Convert\n            var base64Chars = [];\n            for (var i = 0; i < sigBytes; i += 3) {\n                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;\n                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;\n                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;\n\n                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;\n\n                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {\n                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));\n                }\n            }\n\n            // Add padding\n            var paddingChar = map.charAt(64);\n            if (paddingChar) {\n                while (base64Chars.length % 4) {\n                    base64Chars.push(paddingChar);\n                }\n            }\n\n            return base64Chars.join('');\n        },\n\n        /**\n         * Converts a Base64 string to a word array.\n         *\n         * @param {string} base64Str The Base64 string.\n         *\n         * @return {WordArray} The word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);\n         */\n        parse: function (base64Str) {\n            // Shortcuts\n            var base64StrLength = base64Str.length;\n            var map = this._map;\n\n            // Ignore padding\n            var paddingChar = map.charAt(64);\n            if (paddingChar) {\n                var paddingIndex = base64Str.indexOf(paddingChar);\n                if (paddingIndex != -1) {\n                    base64StrLength = paddingIndex;\n                }\n            }\n\n            // Convert\n            var words = [];\n            var nBytes = 0;\n            for (var i = 0; i < base64StrLength; i++) {\n                if (i % 4) {\n                    var bits1 = map.indexOf(base64Str.charAt(i - 1)) << ((i % 4) * 2);\n                    var bits2 = map.indexOf(base64Str.charAt(i)) >>> (6 - (i % 4) * 2);\n                    words[nBytes >>> 2] |= (bits1 | bits2) << (24 - (nBytes % 4) * 8);\n                    nBytes++;\n                }\n            }\n\n            return WordArray.create(words, nBytes);\n        },\n\n        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='\n    };\n}());\n"]},"metadata":{},"sourceType":"module"}