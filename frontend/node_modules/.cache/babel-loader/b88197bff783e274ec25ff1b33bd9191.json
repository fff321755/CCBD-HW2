{"ast":null,"code":"/*\n * Copyright 2010-2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed\n * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\nvar apiGateway = apiGateway || {};\napiGateway.core = apiGateway.core || {};\napiGateway.core.simpleHttpClientFactory = {};\n\napiGateway.core.simpleHttpClientFactory.newClient = function (config) {\n  function buildCanonicalQueryString(queryParams) {\n    //Build a properly encoded query string from a QueryParam object\n    if (Object.keys(queryParams).length < 1) {\n      return '';\n    }\n\n    var canonicalQueryString = '';\n\n    for (var property in queryParams) {\n      if (queryParams.hasOwnProperty(property)) {\n        canonicalQueryString += encodeURIComponent(property) + '=' + encodeURIComponent(queryParams[property]) + '&';\n      }\n    }\n\n    return canonicalQueryString.substr(0, canonicalQueryString.length - 1);\n  }\n\n  var simpleHttpClient = {};\n  simpleHttpClient.endpoint = apiGateway.core.utils.assertDefined(config.endpoint, 'endpoint');\n\n  simpleHttpClient.makeRequest = function (request) {\n    var verb = apiGateway.core.utils.assertDefined(request.verb, 'verb');\n    var path = apiGateway.core.utils.assertDefined(request.path, 'path');\n    var queryParams = apiGateway.core.utils.copy(request.queryParams);\n\n    if (queryParams === undefined) {\n      queryParams = {};\n    }\n\n    var headers = apiGateway.core.utils.copy(request.headers);\n\n    if (headers === undefined) {\n      headers = {};\n    } //If the user has not specified an override for Content type the use default\n\n\n    if (headers['Content-Type'] === undefined) {\n      headers['Content-Type'] = config.defaultContentType;\n    } //If the user has not specified an override for Accept type the use default\n\n\n    if (headers['Accept'] === undefined) {\n      headers['Accept'] = config.defaultAcceptType;\n    }\n\n    var body = apiGateway.core.utils.copy(request.body);\n\n    if (body === undefined) {\n      body = '';\n    }\n\n    var url = config.endpoint + path;\n    var queryString = buildCanonicalQueryString(queryParams);\n\n    if (queryString != '') {\n      url += '?' + queryString;\n    }\n\n    var simpleHttpRequest = {\n      method: verb,\n      url: url,\n      headers: headers,\n      data: body\n    };\n    return axios(simpleHttpRequest);\n  };\n\n  return simpleHttpClient;\n};","map":{"version":3,"sources":["/Users/fkhw/CourseWorks/Cloud Computing & Big Data/homework2/front/photo-search/src/lib/apiGatewayCore/simpleHttpClient.js"],"names":["apiGateway","core","simpleHttpClientFactory","newClient","config","buildCanonicalQueryString","queryParams","Object","keys","length","canonicalQueryString","property","hasOwnProperty","encodeURIComponent","substr","simpleHttpClient","endpoint","utils","assertDefined","makeRequest","request","verb","path","copy","undefined","headers","defaultContentType","defaultAcceptType","body","url","queryString","simpleHttpRequest","method","data","axios"],"mappings":"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","sourcesContent":["/*\n * Copyright 2010-2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed\n * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\n \nvar apiGateway = apiGateway || {};\napiGateway.core = apiGateway.core || {};\n\napiGateway.core.simpleHttpClientFactory = {};\napiGateway.core.simpleHttpClientFactory.newClient = function (config) {\n    function buildCanonicalQueryString(queryParams) {\n        //Build a properly encoded query string from a QueryParam object\n        if (Object.keys(queryParams).length < 1) {\n            return '';\n        }\n\n        var canonicalQueryString = '';\n        for (var property in queryParams) {\n            if (queryParams.hasOwnProperty(property)) {\n                canonicalQueryString += encodeURIComponent(property) + '=' + encodeURIComponent(queryParams[property]) + '&';\n            }\n        }\n\n        return canonicalQueryString.substr(0, canonicalQueryString.length - 1);\n    }\n\n    var simpleHttpClient = { };\n    simpleHttpClient.endpoint = apiGateway.core.utils.assertDefined(config.endpoint, 'endpoint');\n\n    simpleHttpClient.makeRequest = function (request) {\n        var verb = apiGateway.core.utils.assertDefined(request.verb, 'verb');\n        var path = apiGateway.core.utils.assertDefined(request.path, 'path');\n        var queryParams = apiGateway.core.utils.copy(request.queryParams);\n        if (queryParams === undefined) {\n            queryParams = {};\n        }\n        var headers = apiGateway.core.utils.copy(request.headers);\n        if (headers === undefined) {\n            headers = {};\n        }\n\n        //If the user has not specified an override for Content type the use default\n        if(headers['Content-Type'] === undefined) {\n            headers['Content-Type'] = config.defaultContentType;\n        }\n\n        //If the user has not specified an override for Accept type the use default\n        if(headers['Accept'] === undefined) {\n            headers['Accept'] = config.defaultAcceptType;\n        }\n\n        var body = apiGateway.core.utils.copy(request.body);\n        if (body === undefined) {\n            body = '';\n        }\n\n        var url = config.endpoint + path;\n        var queryString = buildCanonicalQueryString(queryParams);\n        if (queryString != '') {\n            url += '?' + queryString;\n        }\n        var simpleHttpRequest = {\n            method: verb,\n            url: url,\n            headers: headers,\n            data: body\n        };\n        return axios(simpleHttpRequest);\n    };\n    return simpleHttpClient;\n};"]},"metadata":{},"sourceType":"module"}