{"ast":null,"code":"/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n(function () {\n  // Shortcuts\n  var C = CryptoJS;\n  var C_lib = C.lib;\n  var Base = C_lib.Base;\n  var C_enc = C.enc;\n  var Utf8 = C_enc.Utf8;\n  var C_algo = C.algo;\n  /**\r\n   * HMAC algorithm.\r\n   */\n\n  var HMAC = C_algo.HMAC = Base.extend({\n    /**\r\n     * Initializes a newly created HMAC.\r\n     *\r\n     * @param {Hasher} hasher The hash algorithm to use.\r\n     * @param {WordArray|string} key The secret key.\r\n     *\r\n     * @example\r\n     *\r\n     *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\r\n     */\n    init: function (hasher, key) {\n      // Init hasher\n      hasher = this._hasher = new hasher.init(); // Convert string to WordArray, else assume WordArray already\n\n      if (typeof key == 'string') {\n        key = Utf8.parse(key);\n      } // Shortcuts\n\n\n      var hasherBlockSize = hasher.blockSize;\n      var hasherBlockSizeBytes = hasherBlockSize * 4; // Allow arbitrary length keys\n\n      if (key.sigBytes > hasherBlockSizeBytes) {\n        key = hasher.finalize(key);\n      } // Clamp excess bits\n\n\n      key.clamp(); // Clone key for inner and outer pads\n\n      var oKey = this._oKey = key.clone();\n      var iKey = this._iKey = key.clone(); // Shortcuts\n\n      var oKeyWords = oKey.words;\n      var iKeyWords = iKey.words; // XOR keys with pad constants\n\n      for (var i = 0; i < hasherBlockSize; i++) {\n        oKeyWords[i] ^= 0x5c5c5c5c;\n        iKeyWords[i] ^= 0x36363636;\n      }\n\n      oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes; // Set initial values\n\n      this.reset();\n    },\n\n    /**\r\n     * Resets this HMAC to its initial state.\r\n     *\r\n     * @example\r\n     *\r\n     *     hmacHasher.reset();\r\n     */\n    reset: function () {\n      // Shortcut\n      var hasher = this._hasher; // Reset\n\n      hasher.reset();\n      hasher.update(this._iKey);\n    },\n\n    /**\r\n     * Updates this HMAC with a message.\r\n     *\r\n     * @param {WordArray|string} messageUpdate The message to append.\r\n     *\r\n     * @return {HMAC} This HMAC instance.\r\n     *\r\n     * @example\r\n     *\r\n     *     hmacHasher.update('message');\r\n     *     hmacHasher.update(wordArray);\r\n     */\n    update: function (messageUpdate) {\n      this._hasher.update(messageUpdate); // Chainable\n\n\n      return this;\n    },\n\n    /**\r\n     * Finalizes the HMAC computation.\r\n     * Note that the finalize operation is effectively a destructive, read-once operation.\r\n     *\r\n     * @param {WordArray|string} messageUpdate (Optional) A final message update.\r\n     *\r\n     * @return {WordArray} The HMAC.\r\n     *\r\n     * @example\r\n     *\r\n     *     var hmac = hmacHasher.finalize();\r\n     *     var hmac = hmacHasher.finalize('message');\r\n     *     var hmac = hmacHasher.finalize(wordArray);\r\n     */\n    finalize: function (messageUpdate) {\n      // Shortcut\n      var hasher = this._hasher; // Compute HMAC\n\n      var innerHash = hasher.finalize(messageUpdate);\n      hasher.reset();\n      var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n      return hmac;\n    }\n  });\n})();","map":{"version":3,"sources":["/Users/fkhw/CourseWorks/Cloud Computing & Big Data/homework2/front/photo-search/src/lib/CryptoJS/components/hmac.js"],"names":["C","CryptoJS","C_lib","lib","Base","C_enc","enc","Utf8","C_algo","algo","HMAC","extend","init","hasher","key","_hasher","parse","hasherBlockSize","blockSize","hasherBlockSizeBytes","sigBytes","finalize","clamp","oKey","_oKey","clone","iKey","_iKey","oKeyWords","words","iKeyWords","i","reset","update","messageUpdate","innerHash","hmac","concat"],"mappings":"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","sourcesContent":["/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n(function () {\r\n    // Shortcuts\r\n    var C = CryptoJS;\r\n    var C_lib = C.lib;\r\n    var Base = C_lib.Base;\r\n    var C_enc = C.enc;\r\n    var Utf8 = C_enc.Utf8;\r\n    var C_algo = C.algo;\r\n\r\n    /**\r\n     * HMAC algorithm.\r\n     */\r\n    var HMAC = C_algo.HMAC = Base.extend({\r\n        /**\r\n         * Initializes a newly created HMAC.\r\n         *\r\n         * @param {Hasher} hasher The hash algorithm to use.\r\n         * @param {WordArray|string} key The secret key.\r\n         *\r\n         * @example\r\n         *\r\n         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\r\n         */\r\n        init: function (hasher, key) {\r\n            // Init hasher\r\n            hasher = this._hasher = new hasher.init();\r\n\r\n            // Convert string to WordArray, else assume WordArray already\r\n            if (typeof key == 'string') {\r\n                key = Utf8.parse(key);\r\n            }\r\n\r\n            // Shortcuts\r\n            var hasherBlockSize = hasher.blockSize;\r\n            var hasherBlockSizeBytes = hasherBlockSize * 4;\r\n\r\n            // Allow arbitrary length keys\r\n            if (key.sigBytes > hasherBlockSizeBytes) {\r\n                key = hasher.finalize(key);\r\n            }\r\n\r\n            // Clamp excess bits\r\n            key.clamp();\r\n\r\n            // Clone key for inner and outer pads\r\n            var oKey = this._oKey = key.clone();\r\n            var iKey = this._iKey = key.clone();\r\n\r\n            // Shortcuts\r\n            var oKeyWords = oKey.words;\r\n            var iKeyWords = iKey.words;\r\n\r\n            // XOR keys with pad constants\r\n            for (var i = 0; i < hasherBlockSize; i++) {\r\n                oKeyWords[i] ^= 0x5c5c5c5c;\r\n                iKeyWords[i] ^= 0x36363636;\r\n            }\r\n            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;\r\n\r\n            // Set initial values\r\n            this.reset();\r\n        },\r\n\r\n        /**\r\n         * Resets this HMAC to its initial state.\r\n         *\r\n         * @example\r\n         *\r\n         *     hmacHasher.reset();\r\n         */\r\n        reset: function () {\r\n            // Shortcut\r\n            var hasher = this._hasher;\r\n\r\n            // Reset\r\n            hasher.reset();\r\n            hasher.update(this._iKey);\r\n        },\r\n\r\n        /**\r\n         * Updates this HMAC with a message.\r\n         *\r\n         * @param {WordArray|string} messageUpdate The message to append.\r\n         *\r\n         * @return {HMAC} This HMAC instance.\r\n         *\r\n         * @example\r\n         *\r\n         *     hmacHasher.update('message');\r\n         *     hmacHasher.update(wordArray);\r\n         */\r\n        update: function (messageUpdate) {\r\n            this._hasher.update(messageUpdate);\r\n\r\n            // Chainable\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Finalizes the HMAC computation.\r\n         * Note that the finalize operation is effectively a destructive, read-once operation.\r\n         *\r\n         * @param {WordArray|string} messageUpdate (Optional) A final message update.\r\n         *\r\n         * @return {WordArray} The HMAC.\r\n         *\r\n         * @example\r\n         *\r\n         *     var hmac = hmacHasher.finalize();\r\n         *     var hmac = hmacHasher.finalize('message');\r\n         *     var hmac = hmacHasher.finalize(wordArray);\r\n         */\r\n        finalize: function (messageUpdate) {\r\n            // Shortcut\r\n            var hasher = this._hasher;\r\n\r\n            // Compute HMAC\r\n            var innerHash = hasher.finalize(messageUpdate);\r\n            hasher.reset();\r\n            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\r\n\r\n            return hmac;\r\n        }\r\n    });\r\n}());\r\n"]},"metadata":{},"sourceType":"module"}